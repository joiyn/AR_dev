"""
Module d'exploration pour trouver la configuration optimale
"""

from solver import mode_find_grid_dimensions, units_per_type
from datetime import datetime
import os


def explore_solutions(
    apt_areas,
    target_percentages,
    quantum=0.5,
    method="round",
    search_range_x=(2.5, 4.0),
    search_range_y=(3.0, 6.0),
    search_step=0.1,
    target_elements_range=(10, 35),
    percentage_tolerance=7.0,
    max_solutions_displayed=10,
    save_to_file=True,
    output_directory="results",
    nombre_logements=None,
    max_etages_par_batiment=None,
    round_variations=False
):
    """
    Explore diff√©rentes configurations pour trouver celle qui respecte les pourcentages cibles.
    
    Returns:
        tuple: (all_solutions, output_path)
    """
    
    def fmt_combo(combo):
        """Formatte une combinaison pour l'affichage"""
        return " + ".join(f"{v:g}" for v in combo) + f" = {sum(combo):g}"
    
    # Cr√©er le dossier de sortie si n√©cessaire
    if save_to_file and not os.path.exists(output_directory):
        os.makedirs(output_directory)
    
    # G√©n√©rer le nom de fichier avec timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_filename = f"solutions_{timestamp}.txt" if save_to_file else None
    output_path = os.path.join(output_directory, output_filename) if save_to_file else None
    
    # Fonction pour √©crire √† la fois √† l'√©cran et dans le fichier
    def print_and_log(message="", file_handle=None):
        print(message)
        if file_handle:
            file_handle.write(message + "\n")
    
    # Ouvrir le fichier de sortie
    log_file = open(output_path, 'w', encoding='utf-8') if save_to_file else None
    
    # D√©terminer si une dimension est fix√©e
    x_fixed = (search_range_x[0] == search_range_x[1])
    y_fixed = (search_range_y[0] == search_range_y[1])
    
    # En-t√™te console simplifi√©
    print("‚ïê" * 80)
    print("RECHERCHE DE CONFIGURATION OPTIMALE")
    print("‚ïê" * 80)
    print(f"üéØ Cibles : {target_percentages}")
    if x_fixed and y_fixed:
        print(f"üìê Grille fix√©e : {search_range_x[0]:g} √ó {search_range_y[0]:g} m")
    elif x_fixed:
        print(f"üìê grid_x fix√© : {search_range_x[0]:g} m, grid_y : {search_range_y[0]:g}-{search_range_y[1]:g} m")
    elif y_fixed:
        print(f"üìê grid_y fix√© : {search_range_y[0]:g} m, grid_x : {search_range_x[0]:g}-{search_range_x[1]:g} m")
    else:
        print(f"üìê grid_x : {search_range_x[0]:g}-{search_range_x[1]:g} m, grid_y : {search_range_y[0]:g}-{search_range_y[1]:g} m")
    print(f"üîç √âl√©ments de grille : {target_elements_range[0]}-{target_elements_range[1]}")
    print()
    
    # En-t√™te fichier d√©taill√©
    if log_file:
        log_file.write("‚ïê" * 80 + "\n")
        log_file.write("RECHERCHE DE CONFIGURATION OPTIMALE\n")
        log_file.write("‚ïê" * 80 + "\n\n")
        log_file.write(f"üìã Pourcentages impos√©s : {target_percentages}\n")
        log_file.write(f"üéØ Tol√©rance par type : ¬±{percentage_tolerance}%\n")
        log_file.write(f"üìê Plages de recherche :\n")
        log_file.write(f"   ‚Ä¢ grid_x : {search_range_x[0]:g} √† {search_range_x[1]:g} m")
        if x_fixed:
            log_file.write(" (fix√©)")
        log_file.write("\n")
        log_file.write(f"   ‚Ä¢ grid_y : {search_range_y[0]:g} √† {search_range_y[1]:g} m")
        if y_fixed:
            log_file.write(" (fix√©)")
        log_file.write("\n")
        log_file.write(f"   ‚Ä¢ pas : {search_step:g} m\n")
        log_file.write(f"üîç Recherche : target_elements (unit√©s de grille) de {target_elements_range[0]} √† {target_elements_range[1]}\n\n")
        log_file.write("‚ÑπÔ∏è  NOTE : 1 '√©l√©ment' = 1 unit√© de grille (pas 1 appartement)\n")
        log_file.write("   Exemple : 16 √©l√©ments peuvent donner 3 appartements (4+5+7 unit√©s)\n\n")
    
    all_solutions = []
    
    # Explorer diff√©rents nombres d'√©l√©ments de grille
    for target_elem in range(target_elements_range[0], target_elements_range[1] + 1):
        print(f"üîé {target_elem}", end=" ", flush=True)
        if log_file:
            log_file.write(f"üîé Test avec {target_elem} √©l√©ments de grille... ")
            log_file.flush()
        
        results = []
        
        # Explorer en fixant y et variant x
        steps_y = int((search_range_y[1] - search_range_y[0]) / search_step) + 1 if search_range_y[0] != search_range_y[1] else 1
        for i in range(steps_y):
            y_val = search_range_y[0] + i * search_step
            results_y = mode_find_grid_dimensions(
                float(target_elem), apt_areas, target_percentages,
                fixed_dimension=('y', y_val),
                quantum=quantum, method=method,
                search_range=search_range_x, search_step=search_step,
                percentage_tolerance=percentage_tolerance,
                round_variations=round_variations
            )
            results.extend(results_y)
        
        if results:
            print(f"‚úÖ", end="")
            if log_file:
                log_file.write(f"‚úÖ {len(results)} solution(s)\n")
                log_file.flush()
            all_solutions.extend([(target_elem, *r) for r in results])
        else:
            print(f"‚ùå", end="")
            if log_file:
                log_file.write("‚ùå\n")
                log_file.flush()
    
    # Trier par score (meilleur d'abord)
    all_solutions.sort(key=lambda x: x[5])
    
    # Affichage des r√©sultats (fichier seulement)
    if log_file:
        log_file.write("\n" + "‚ïê" * 80 + "\n")
        log_file.write(f"üìä R√âSULTATS : {len(all_solutions)} solution(s) trouv√©e(s)\n")
        log_file.write("‚ïê" * 80 + "\n\n")
    
    if all_solutions:
        for i, (target, gx, gy, combos, pct, score) in enumerate(all_solutions[:max_solutions_displayed], 1):
            # Calculer les unit√©s par type pour cette grille
            cell_area = gx * gy
            per_type = units_per_type(gx, gy, apt_areas, quantum=quantum, method=method)
            
            # Calculer √©tages et b√¢timents si nombre de logements fourni
            if nombre_logements and max_etages_par_batiment:
                import math
                
                # Calculer le nombre de logements par type selon les pourcentages
                # et la surface totale r√©elle
                nb_par_type = {}
                surface_par_type = {}
                surface_totale_logements = 0
                
                for apt in apt_areas.keys():
                    # Nombre de logements de ce type (arrondi)
                    nb = round(nombre_logements * target_percentages[apt] / 100)
                    nb_par_type[apt] = nb
                    
                    # Surface pour ce type
                    surface = nb * apt_areas[apt]
                    surface_par_type[apt] = surface
                    surface_totale_logements += surface
                
                # Nombre total de cellules n√©cessaires
                total_cells_needed = surface_totale_logements / cell_area
                
                # Nombre d'√©l√©ments par √©tage
                elements_par_etage = target
                
                # Nombre d'√©tages n√©cessaires
                nb_etages = math.ceil(total_cells_needed / elements_par_etage)
                
                # Nombre de b√¢timents n√©cessaires (avec d√©cimales)
                nb_batiments = nb_etages / max_etages_par_batiment
                
                # Empreintes au sol
                footprint_par_batiment = elements_par_etage * cell_area
                nb_batiments_entiers = math.ceil(nb_batiments)
                empreinte_totale = nb_batiments_entiers * footprint_par_batiment
            
            # Titre (seulement dans le fichier)
            if log_file:
                log_file.write(f"{'üèÜ' if i == 1 else 'üìå'} Solution {i} (score: {score:.2f})\n")
            
            # Informations de base (fichier seulement)
            if log_file:
                log_file.write(f"  ‚îî‚îÄ {target} √©l√©ments de grille\n")
                log_file.write(f"  ‚îî‚îÄ Grille : {gx:g} √ó {gy:.3f} m = {cell_area:.3f} m¬≤ par cellule\n")
                
                # Informations sur √©tages et b√¢timents
                if nombre_logements and max_etages_par_batiment:
                    log_file.write(f"\n  ‚îî‚îÄ Organisation du projet :\n")
                    log_file.write(f"      ‚Ä¢ Nombre total de logements : {nombre_logements}\n")
                    log_file.write(f"      ‚Ä¢ R√©partition par type (selon % cibles) :\n")
                    for apt in sorted(nb_par_type.keys()):
                        pct_cible = target_percentages[apt]
                        nb = nb_par_type[apt]
                        surf = surface_par_type[apt]
                        log_file.write(f"         - {apt} : {nb} logements ({pct_cible}%) = {surf:.0f} m¬≤\n")
                    log_file.write(f"      ‚Ä¢ Surface totale logements : {surface_totale_logements:.0f} m¬≤\n")
                    log_file.write(f"      ‚Ä¢ √âl√©ments par √©tage : {elements_par_etage}\n")
                    log_file.write(f"      ‚Ä¢ Nombre d'√©tages n√©cessaires : {nb_etages}\n")
                    log_file.write(f"      ‚Ä¢ √âtages max par b√¢timent : {max_etages_par_batiment}\n")
                    log_file.write(f"      ‚Ä¢ Nombre de b√¢timents : {nb_batiments:.2f}\n")
                    log_file.write(f"      ‚Ä¢ Nombre de b√¢timents (entiers) : {nb_batiments_entiers}\n")
                    log_file.write(f"      ‚Ä¢ Empreinte au sol par b√¢timent : {footprint_par_batiment:.0f} m¬≤\n")
                    log_file.write(f"      ‚Ä¢ Empreinte au sol totale : {empreinte_totale:.0f} m¬≤\n")
                
                log_file.write(f"\n")
            
            # Configuration des types d'appartements (fichier seulement)
            if log_file:
                log_file.write(f"  ‚îî‚îÄ Configuration des types :\n")
                for apt in sorted(apt_areas.keys()):
                    apt_area = apt_areas[apt]
                    units = per_type.get(apt, 0.0)
                    actual_sqm = units * cell_area
                    log_file.write(f"      ‚Ä¢ {apt} : {units:g} √©l√©ments de grille = {actual_sqm:.1f} m¬≤ (cible: {apt_area} m¬≤)\n")
                log_file.write(f"\n")
            
            # Pourcentages (fichier seulement)
            if log_file:
                log_file.write(f"  ‚îî‚îÄ Pourcentages de surface obtenus :\n")
                for apt in sorted(target_percentages.keys()):
                    target_val = target_percentages[apt]
                    actual_val = pct.get(apt, 0.0)
                    diff = actual_val - target_val
                    emoji = "‚úì" if abs(diff) <= percentage_tolerance/2 else "~"
                    log_file.write(f"      {emoji} {apt}: {actual_val:5.1f}% (cible: {target_val:5.1f}%, √©cart: {diff:+5.1f}%)\n")
                log_file.write(f"\n")
            
            # Combinaisons (fichier seulement)
            if log_file:
                log_file.write(f"  ‚îî‚îÄ {len(combos)} combinaison(s) possible(s) :\n")
                for j, combo in enumerate(combos, 1):
                    log_file.write(f"      {j}. {fmt_combo(combo)}\n")
                log_file.write(f"\n")
        
        if len(all_solutions) > max_solutions_displayed:
            if log_file:
                log_file.write(f"... et {len(all_solutions) - max_solutions_displayed} autre(s) solution(s)\n\n")
        
        # R√©sum√© de la meilleure (fichier seulement)
        best = all_solutions[0]
        target, gx, gy, combos, pct, score = best
        if log_file:
            log_file.write("‚ïê" * 80 + "\n")
            log_file.write("üí° RECOMMANDATION : Solution optimale\n")
            log_file.write("‚ïê" * 80 + "\n")
            log_file.write(f"Utiliser une grille de {gx:g} √ó {gy:.3f} m avec {target} √©l√©ments de grille\n")
            log_file.write(f"Pr√©cision : score de {score:.2f} (plus bas = meilleur)\n")
            if combos:
                nb_apts = len(combos[0])
                log_file.write(f"Nombre d'appartements (exemple) : {nb_apts}\n")
        
        # Message console simplifi√©
        print(f"\n‚úÖ {len(all_solutions)} solution(s) trouv√©e(s)")
        print(f"üèÜ Meilleure : Grille {gx:g}√ó{gy:.3f}m, {target} √©l√©ments, score {score:.2f}")
        
    else:
        print("\n‚ùå Aucune solution trouv√©e")
        if log_file:
            log_file.write("‚ùå Aucune solution trouv√©e avec les param√®tres actuels.\n\n")
            log_file.write("üí° SUGGESTIONS pour trouver des solutions :\n")
            log_file.write(f"   ‚Ä¢ Augmenter percentage_tolerance (actuellement {percentage_tolerance}% ‚Üí essayer 10.0 ou 15.0)\n")
            log_file.write(f"   ‚Ä¢ √âlargir target_elements_range (actuellement {target_elements_range} ‚Üí essayer (5, 50))\n")
            log_file.write(f"   ‚Ä¢ √âlargir search_range_x/y (actuellement x:{search_range_x}, y:{search_range_y})\n")
            log_file.write(f"   ‚Ä¢ R√©duire search_step pour plus de pr√©cision (actuellement {search_step} ‚Üí essayer 0.05)\n")
            if x_fixed or y_fixed:
                log_file.write(f"   ‚Ä¢ Essayer de ne fixer aucune dimension pour explorer x ET y librement\n")
            log_file.write("\n")
    
    # Fermer le fichier et afficher le chemin
    if log_file:
        log_file.close()
        print(f"üíæ R√©sultats d√©taill√©s dans : {output_path}")
    
    return all_solutions, output_path
